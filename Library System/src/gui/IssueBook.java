package gui;

import static gui.ReadFiles.ReadBook;
import static gui.ReadFiles.ReadBookCount;
import static gui.ReadFiles.ReadIssuedBook;
import static gui.ReadFiles.ReadIssuedBookCount;
import static gui.ReadFiles.ReadStudent;
import static gui.ReadFiles.ReadStudentCount;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class IssueBook extends javax.swing.JFrame {

    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    Date date = new Date();
    Calendar cal = Calendar.getInstance();
    SimpleDateFormat s = new SimpleDateFormat("yyyy/MM/dd");
    Calendar c = Calendar.getInstance();

    public IssueBook() {
        initComponents();
    }

    private boolean EnoughBooksCheck() throws FileNotFoundException {
        int i, t = 0;
        int counter = 0;
        AddNewIssuedBook n[] = ReadIssuedBook();
        int count1 = ReadIssuedBookCount();
        for (i = 0; i < count1; i++) {
            if (n[i].getBookCallNo().equals(BookCallNo.getText())) {
                counter++;
            }
        }
        AddNewBook m[] = ReadBook();
        int count2 = ReadBookCount();
        for (i = 0; i < count2; i++) {
            if (m[i].getCallNo().equals(BookCallNo.getText())) {
                t = Integer.parseInt(m[i].getQuantity());
            }
        }
        if (counter == t) {
            return false;
        } else {
            return true;
        }

    }

    private boolean StudentCheck() throws FileNotFoundException {
        boolean n = false;
        AddNewStudent[] k = ReadStudent();
        int count = ReadStudentCount();
        for (int i = 0; i < count; i++) {
            if (k[i].getStudID().equals(StudID.getText())
                    && k[i].getStudName().equals(StudName.getText())
                    && k[i].getStudContactNum().equals(StudContact.getText().toString())) {
                n = true;
                break;
            }
        }
        return n;
    }

    private boolean IssueBookCheck() throws FileNotFoundException {
        int counter = 0;
        AddNewIssuedBook n[] = ReadIssuedBook();
        int count = ReadIssuedBookCount();

        for (int i = 0; i < count; i++) {
            if (n[i].getStudID().equals(StudID.getText())) {
                counter++;
            }
        }
        if (counter == 3) {
            return false;
        } else {
            return true;
        }
    }

    private boolean BookCheck() throws FileNotFoundException {
        boolean x = false;
        AddNewBook n[] = ReadBook();
        int count = ReadBookCount();

        for (int i = 0; i < count; i++) {
            if (n[i].getCallNo().equals(BookCallNo.getText())) {
                x = true;
            }
        }
        return x;

    }

    private int check1() throws FileNotFoundException {
        boolean x = BookCheck();
        boolean y = IssueBookCheck();
        boolean z = StudentCheck();
        boolean h = EnoughBooksCheck();
        int m = 0;

        if (x == true && y == true && z == true && h == true) {
            m = 1;
        }
        if (x == false) {
            return -1;
        } else if (y == false) {
            return -2;
        } else if (h == false) {
            return -3;
        } else {
            return m;
        }
    }

    private int check2() throws FileNotFoundException {
        boolean x = BookCheck();
        boolean y = StudentCheck();
        int m = 0;
        if (x == true && y == true) {
            m = 1;
        }
        if (x == false) {
            return -1;
        } else {
            return m;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        StudID = new javax.swing.JTextField();
        BookCallNo = new javax.swing.JTextField();
        StudContact = new javax.swing.JTextField();
        StudName = new javax.swing.JTextField();
        Issue = new javax.swing.JButton();
        Back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Issue Book");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("Book CallNo.:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Student ID:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel4.setText("Student Name:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Student Contact:");

        StudID.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        BookCallNo.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        BookCallNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookCallNoActionPerformed(evt);
            }
        });

        StudContact.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        StudName.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        Issue.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Issue.setText("Issue Book");
        Issue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueActionPerformed(evt);
            }
        });

        Back.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Issue)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(StudID)
                            .addComponent(jLabel1)
                            .addComponent(StudContact)
                            .addComponent(StudName)
                            .addComponent(BookCallNo))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(BookCallNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(StudID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(StudName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addComponent(StudContact, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(Issue)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(Back)
                        .addGap(45, 45, 45))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssueActionPerformed

         if(Validations.Name_Validation(StudName.getText())==-1)
 {
 JOptionPane.showMessageDialog(this,"Invalid Short name at least 6-30 characters");
 }
  if(Validations.Name_Validation(StudName.getText())==0)
  {
  JOptionPane.showMessageDialog(this,"Invalid name");
  }
  else if(Validations.NumberValidation(StudID.getText())==false)
  {
  JOptionPane.showMessageDialog(this,"Invalid Id please Write numbers");
  }
  
   if(Validations.Name_Validation(StudName.getText())==1)
       {
           if(Validations.NumberValidation(StudContact.getText())==false)
            {
                JOptionPane.showMessageDialog(this,"Invalid Contact number");
             
            }
            else
           {
        try {

            FileWriter fw = null;
            try {
                c.setTime(s.parse(dateFormat.format(date)));
            } catch (ParseException ex) {
                Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
            }
            c.add(Calendar.DAY_OF_MONTH, 14);
            int x = 0;
            fw = new FileWriter("IssueBooks.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            if (bw != null) {
                try {
                    x = check1();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
                }
                switch (x) {
                    case 1:
                        PrintWriter out = new PrintWriter(bw);
                        out.println(BookCallNo.getText() + ","
                                + StudID.getText() + ","
                                + StudName.getText() + ","
                                + StudContact.getText() + ","
                                + dateFormat.format(date) + ","
                                + s.format(c.getTime()));

                        out.close();
                        JOptionPane.showMessageDialog(this, "Book Issued Succcessfully, The student should return it after 2 weeks");
                        this.hide();
                        LibrarianSection lib = new LibrarianSection();
                        lib.setVisible(true);

                        break;
                    case -1:
                        JOptionPane.showMessageDialog(this, "No Book with such callNo.");
                        break;
                    case -2:
                        JOptionPane.showMessageDialog(this, "Student already issuing 3 books");
                        break;
                    case -3:
                        JOptionPane.showMessageDialog(this, "Not availble at the moment, come back after 2 weeks");
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Wonge input");
                        break;

                }
            } else {
                x = check2();
                switch (x) {
                    case 1:
                        fw = new FileWriter("IssueBooks.txt", true);
                        bw = new BufferedWriter(fw);
                        PrintWriter out = new PrintWriter(bw);
                        out.println(BookCallNo.getText() + ","
                                + StudID.getText() + ","
                                + StudName.getText() + ","
                                + StudContact.getText() + ","
                                + dateFormat.format(date) + ","
                                + s.format(c.getTime()));
                        out.close();
                        JOptionPane.showMessageDialog(this, "Book Issued Succcessfully, The student should return it after 2 weeks");
                        this.hide();
                        LibrarianSection lib = new LibrarianSection();
                        lib.setVisible(true);
                        break;
                    case -1:
                        JOptionPane.showMessageDialog(this, "No Book with such callNo.");
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Wonge student input");
                        break;
                }
            }
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
                   }
       }
    }//GEN-LAST:event_IssueActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        LibrarianSection lib = new LibrarianSection();
        lib.setVisible(true);
        this.hide();        // TODO add your handling code here:
    }//GEN-LAST:event_BackActionPerformed

    private void BookCallNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookCallNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BookCallNoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField BookCallNo;
    private javax.swing.JButton Issue;
    private javax.swing.JTextField StudContact;
    private javax.swing.JTextField StudID;
    private javax.swing.JTextField StudName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
